a= echelon(A)
b= echelon(B)
a == b   # Error in a == b : non-conformable arrays
identical(a, b)   # FALSE
all.equal(a, b)   # why? different dims and different dimnames
all(d == b)   # TRUE but
identical(d, b)   # FALSE
all.equal(d, b)   # why? different dimnames
source('~/.active-rstudio-document')
A <- matrix(c(1,2,1,5,3,-1,0,2,-7,-10,1,2,4,-1,-6), nrow = 3, ncol = 5 , byrow = TRUE)
B <- matrix(c(0,0,1,-2,-3,0,1,0,2,1,1,0,0,3,4), nrow = 3 , ncol=5 , byrow= TRUE)
a= echelon(A)
b= echelon(B)
a == b   # Error in a == b : non-conformable arrays
identical(a, b)   # FALSE
all.equal(a, b)   # why? different dims and different dimnames
# An one line way of solving it.
matequal <- function(x, y)
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
matequal(a, b)   # FALSE
A <- matrix(c(1,2,1,5,3,-1,0,2,-7,-10,1,2,4,-1,-6), nrow = 3, ncol = 5 , byrow = TRUE)
B <- matrix(c(0,0,1,-2,-3,0,1,0,2,1,1,0,0,3,4), nrow = 3 , ncol=5 , byrow= TRUE)
a= echelon(A)
b= echelon(B)
a == b
identical(a, b)   # FALSE
all.equal(a, b)
# An one line way of solving it.
matequal <- function(x, y)
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
if(matequal(a, b) == TRUE){
print("The Matrices are Equivalent")
}else{
print("Matrices are non Equivalent")
}
P <- matrix(c(1,0,0,1,1,0,-1/2,-1/2,1/2) , nrow =3 , byrow = TRUE)
Q <- matrix(c(1,-2,1,-1,0,1,0,1,0,0,1,-1,0,0,0,1), nrow = 4 , byrow = TRUE)
View(Q)
R <- 3
C <- 4
A <- matrix(c(1,2,-1,-2,-1,-1,1,1,0,1,2,1), nrow = R,ncol = C, byrow = TRUE)
N <- echelon(A)
N
r <- rankMatrix(N)
print(r[1])
P <- matrix(c(1,0,0,1,1,0,-1/2,-1/2,1/2) , nrow =3 , byrow = TRUE)
Q <- matrix(c(1,-2,1,-1,0,1,0,1,0,0,1,-1,0,0,0,1), nrow = 4 , byrow = TRUE)
print(P*A*Q)
R <- 4
C <- 4
A <- matrix(c(1,2,3,3,1,2,0,3,1,0,1,1,1,1,1,2), nrow = R , ncol =C , byrow = TRUE)
R <- 4
C <- 4
A <- matrix(c(1,2,3,3,1,2,0,3,1,0,1,1,1,1,1,2), nrow = R , ncol =C , byrow = TRUE)
b <- c(3,1,3,1)
e <- echelon(A)
r <- rankMatrix(e)
if(r == C){
print(" The set of equation has a unique solution ")
x <- solve(A,b)
showEqn(A,b, vars=x)
showEqn(A,b, simplify = TRUE)
}else if(r < C){
print(" The sysytem has infinetly many solutions")
}else{
print(" Equation has no solution ")
}
r <- rankMatrix(e)
r
C <- 4
A <- matrix(c(1,2,3,3,1,2,0,3,1,0,1,1,1,1,1,2), nrow = R , ncol =C , byrow = TRUE)
b <- c(3,1,3,1)
e <- echelon(A)
r <- rankMatrix(e)
print(r[1])
if(r == C){
print(" The set of equation has a unique solution ")
x <- solve(A,b)
showEqn(A,b, vars=x)
showEqn(A,b, simplify = TRUE)
}else if(r < C){
print(" The sysytem has infinetly many solutions")
}else{
print(" Equation has no solution ")
}
A <- matrix(c(1,3,4,7,2,3,5,8,1,4,5,9), nrow = 3 , ncol = 4 , byrow = TRUE)
det(A)
A <- matrix(c(1,3,4,2,3,5,1,4,5), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
library("matlib", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.5.3/library")
A <- matrix(c(1,3,4,2,3,5,1,4,5), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
B <- matrix(c(3,4,7,3,5,8,4,5,9), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
A <- matrix(c(1,3,4,2,3,5,1,4,5), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
inv(A)
B <- matrix(c(3,4,7,3,5,8,4,5,9), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
inv(B)
A <- matrix(c(1,3,1,2,3,5,1,4,5), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
inv(A)
B <- matrix(c(3,4,7,3,5,8,4,5,9), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
inv(B)
A <- matrix(c(1,3,4,2,3,5,1,4,5), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
inv(A)
B <- matrix(c(3,4,7,3,5,8,4,5,9), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
inv(B)
A <- matrix(c(1,2,3,1,3,4,1,4,4), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
inv(A)
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
inv(A)
B <- matrix(c(1,2,1,1,3,2,1,0,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
inv(B)
C <- matrix(c(1,2,2,1,3,1,1,1,3), nrow = 3 , ncol = 3 , byrow = TRUE)
det(C)
inv(C)
D <- matrix(c(1,1,1,1,1,2,-1,2,1,-1,2,1,1,3,3,2), nrow = 4 , ncol = 4 , byrow = TRUE)
det(D)
inv(D)
E <- matrix(c(1,1,1,1,1,3,1,2,1,2,-1,1,5,9,1,6), nrow = 4 , ncol = 4 , byrow = TRUE)
det(E)
inv(E)
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
if(inv(A) == TRUE)
print(inv(A))
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
if(inv(A) == TRUE)
print(inv(A))
B <- matrix(c(1,2,1,1,3,2,1,0,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
if(inv(B) == TRUE)
print(inv(B))
C <- matrix(c(1,2,2,1,3,1,1,1,3), nrow = 3 , ncol = 3 , byrow = TRUE)
det(C)
if(inv(C) == TRUE)
print(inv(C))
D <- matrix(c(1,1,1,1,1,2,-1,2,1,-1,2,1,1,3,3,2), nrow = 4 , ncol = 4 , byrow = TRUE)
det(D)
if(inv(D) == TRUE)
print(inv(D))
E <- matrix(c(1,1,1,1,1,3,1,2,1,2,-1,1,5,9,1,6), nrow = 4 , ncol = 4 , byrow = TRUE)
det(E)
if(inv(E) == TRUE)
print(inv(E))
1
1
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
if(inv(A) == TRUE)
inv(A)
B <- matrix(c(1,2,1,1,3,2,1,0,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(B)
if(inv(B) == TRUE)
inv(B)
C <- matrix(c(1,2,2,1,3,1,1,1,3), nrow = 3 , ncol = 3 , byrow = TRUE)
det(C)
if(inv(C) == TRUE)
inv(C)
D <- matrix(c(1,1,1,1,1,2,-1,2,1,-1,2,1,1,3,3,2), nrow = 4 , ncol = 4 , byrow = TRUE)
det(D)
if(inv(D) == TRUE)
inv(D)
E <- matrix(c(1,1,1,1,1,3,1,2,1,2,-1,1,5,9,1,6), nrow = 4 , ncol = 4 , byrow = TRUE)
det(E)
if(inv(E) == TRUE)
inv(E)
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
det(A)
if(det(A) ~ 0)
inv(A)
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(A) != 0)
inv(A)
B <- matrix(c(1,2,1,1,3,2,1,0,1), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(B) != 0)
inv(B)
C <- matrix(c(1,2,2,1,3,1,1,1,3), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(C) != 0)
inv(C)
D <- matrix(c(1,1,1,1,1,2,-1,2,1,-1,2,1,1,3,3,2), nrow = 4 , ncol = 4 , byrow = TRUE)
if(det(D) != 0)
inv(D)
E <- matrix(c(1,1,1,1,1,3,1,2,1,2,-1,1,5,9,1,6), nrow = 4 , ncol = 4 , byrow = TRUE)
if(det(E) != 0)
inv(E)
E <- matrix(c(1,1,1,1,1,3,1,2,1,2,-1,1,5,9,1,6), nrow = 4 , ncol = 4 , byrow = TRUE)
if(determinant(E) != 0)
inv(E)
A <- matrix(c(1,1,1,1,2,3,0,1,1), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(A) != 0){
inv(A)
}else{
print("Matrix is not invertible")
}
B <- matrix(c(1,2,1,1,3,2,1,0,1), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(B) != 0){
inv(B)
}else{
print("Matrix is not invertible")
}
C <- matrix(c(1,2,2,1,3,1,1,1,3), nrow = 3 , ncol = 3 , byrow = TRUE)
if(det(C) != 0){
inv(C)
}else{
print("Matrix is not invertible")
}
D <- matrix(c(1,1,1,1,1,2,-1,2,1,-1,2,1,1,3,3,2), nrow = 4 , ncol = 4 , byrow = TRUE)
if(det(D) != 0){
inv(D)
}else{
print("Matrix is not invertible")
}
A <- matrix(c(1,1,-1,2,1,-5,1), nrow = 3, ncol = 3 , byrow = TRUE)
A <- matrix(c(1,1,-1,2,1,3,1,-5,1), nrow = 3, ncol = 3 , byrow = TRUE)
det(A)
A <- matrix(c(1,2,-3,4,-4,2,1,3,3,0,-2,0,1,0,2,-5), nrow = 4, ncol = 4 , byrow = TRUE)
det(A)
A <- matrix(c(1,2,3,-4,0,-5,6,-7,0,0,-8,9,0,0,0,10), nrow = 4, ncol = 4 , byrow = TRUE)
det(A)
A <- matrix(c(1,0,-1,2,0,3,1,-5,1), nrow = 3, ncol = 3 , byrow = TRUE)
det(A)
source('~/.active-rstudio-document', echo=TRUE)
x <- 1
y <- 1
z <- complex(real = x, imaginary = y)
z
source('~/.active-rstudio-document', echo=TRUE)
x <- 1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/CODE/Chapter 4/EXR_4_1R.R', echo=TRUE)
A <- matrix(c(0, complex(real = 1,imaginary = 1), complex(real = 1,imaginary = 2),complex(real = 1,imaginary = -1),0,complex(real = 2,imaginary = -3),complex(real = 1,imaginary = -2),complex(real = 2,imaginary = 3),0), nrow = 3,ncol = 3, byrow = TRUE)
View(A)
source('~/.active-rstudio-document', echo=TRUE)
library("graphics", lib.loc="C:/Program Files/R/R-3.5.3/library")
A <- matrix(c(0, complex(real = 1,imaginary = 1), complex(real = 1,imaginary = 2),complex(real = 1,imaginary = -1),0,complex(real = 2,imaginary = -3),complex(real = 1,imaginary = -2),complex(real = 2,imaginary = 3),0), nrow = 3,ncol = 3, byrow = TRUE)
det(A)
install.packages("complexplus")
library("complexplus", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("expm", lib.loc="C:/Program Files/R/R-3.5.3/library")
A <- matrix(c(0, complex(real = 1,imaginary = 1), complex(real = 1,imaginary = 2),complex(real = 1,imaginary = -1),0,complex(real = 2,imaginary = -3),complex(real = 1,imaginary = -2),complex(real = 2,imaginary = 3),0), nrow = 3,ncol = 3, byrow = TRUE)
Det(A)
source('~/CODE/Chapter 8/EXR_8_15R.R', echo=TRUE)
source('~/CODE/Chapter 8/EXR_8_15R.R', echo=TRUE)
install.packages("RConics")
library("RConics", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("matlib", lib.loc="C:/Program Files/R/R-3.5.3/library")
A <- matrix(c(1,1,-1,2,1,3,1,-5,1), nrow = 3 , byrow= TRUE)
a <- adjoint(A)
d <- det(A)
inv <- a/d
inv <- a/d
inv
I <- inv(A)
I
# An one line way of solving it.
matequal <- function(x, y)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("complexplus", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("expm", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("matlib", lib.loc="C:/Program Files/R/R-3.5.3/library")
format(round(inv,2), nsmall=2 )
format(round(I, 2) , nsmall=2  )
inv == I
identical(inv, I)   # FALSE
all.equal(inv, I)
# An one line way of solving it.
matequal <- function(x, y)
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
if(matequal(inv, I) == TRUE){
print("The inverse in both cases are equal")
}else{
print("Matrices are non Equivalent")
}
source('~/CODE/Chapter 8/EX_8_12R.R', echo=TRUE)
A <- matrix(c(3,1,2,1,2,1,1,1,1), nrow = 3 , byrow= TRUE)
a <- adjoint(A)
d <- det(A)
inv <- a/d
I <- inv(A)
source('~/.active-rstudio-document', echo=TRUE)
A <- matrix(c(-4,-3,-3,1,0,1,4,4,3), nrow = 3 , byrow= TRUE)
a <- adjoint(A)
a
source('~/.active-rstudio-document', echo=TRUE)
A <-  matrix(c(0,1,-1,0), nrow = 2 , byrow = TRUE)
Eigen(A)
A <-  matrix(c(0,1,-1,0), nrow = 2 , byrow = TRUE)
Eigen(A, tol = sqrt(.Machine$double.eps), max.iter = 100,
retain.zeroes = TRUE)
View(A)
A <-  matrix(c(0,1,-1,0), nrow = 2 , byrow = TRUE)
eigen(A)
A <-  matrix(c(0,1,-1,0), nrow = 2 , byrow = TRUE)
eigen(A, only.values = TRUE)
A <-  matrix(c(-3,1,-1,-7,5,-1,-6,6,-2), nrow = 3 , byrow = TRUE)
eigen(A, only.values = TRUE)
A <-  matrix(c(1,0,-1,1,2,1,2,2,3), nrow = 3 , byrow = TRUE)
a <- eigen(A, only.values = TRUE)
B <-  matrix(c(0,1,0,0,0,1,1,-3,3), nrow = 3 , byrow = TRUE)
b <- eigen(B, only.values = TRUE)
C <-  matrix(c(2-i,0,i,0,1+i,0,i,0,2-i), nrow = 3 , byrow = TRUE)
detach("package:complexplus", unload=TRUE)
library("complexplus", lib.loc="C:/Program Files/R/R-3.5.3/library")
C <-  matrix(c(complex(real=2, imaginary = -1),0,complex(imaginary = 1,real = 0),0,complex(real=1,imaginary = 1),0,complex(imaginary = 1),0,complex(real=2,imaginary = -1)), nrow = 3 , byrow = TRUE)
c <- eigen(C, only.values = TRUE)
A <-  matrix(c(1,0,-1,1,2,1,2,2,3), nrow = 3 , byrow = TRUE)
a <- eigen(A, only.values = TRUE)
a
B <-  matrix(c(0,1,0,0,0,1,1,-3,3), nrow = 3 , byrow = TRUE)
b <- eigen(B, only.values = TRUE)
b
C <-  matrix(c(complex(real=2, imaginary = -1),0,complex(imaginary = 1,real = 0),0,complex(real=1,imaginary = 1),0,complex(imaginary = 1),0,complex(real=2,imaginary = -1)), nrow = 3 , byrow = TRUE)
c <- eigen(C, only.values = TRUE)
c
install.packages("MAPLES")
source('~/CODE/CH2/EX2.7.a/Ex2_2.7A.r', echo=TRUE)
# Example : 3   Chapter : 6.6     Page No: 357
# Pascals matrix and its inverse are similar
A<-matrix(c(1,1,1,1,0,1,2,3,0,0,1,3,0,0,0,1),ncol=4)
A1<-solve(A)
Aev<-eigen(A)$values
A1ev<-eigen(A1)$values
print("Both pascal matrix and its inverse have same eigen values")
print(Aev)
print(A1ev)
install.packages("pracma")
source('C:/Users/BLACKHAWK/Downloads/Ex7.3_1.r', echo=TRUE)
source('C:/Users/BLACKHAWK/Downloads/Ex7.3_1.r', echo=TRUE)
# Example : 1   Chapter : 7.3     Page No: 400
# Diagonaliazation of matrix
A<-matrix(c(0.5,-0.5,-0.5,0.5),ncol=2)
ev<-eigen(A)$values
D<-matrix(c(ev[1],0,0,ev[2]),ncol=2)
print("The diagonialized matrix")
print(D)
source('~/CODE/Basics of Linear Algebra/Chapter 9/EXR_9_1R.R', echo=TRUE)
source('~/CODE/Basics of Linear Algebra/Chapter 9/EX_9_2R.R', echo=TRUE)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.5.3/library")
x <- c(10, 10, 15, 20, 20, 25, 70)
y <- c(135, 130, 120, 115, 120, 110, 100)
DF <- data.frame(x, y)
library(ggplot2)
ggplot(DF, aes(x, y)) + geom_point() + labs(title = "Scatter Plot between x and y", x = "X",
y = "Y")
point <- x[7]  # From Scatter Plot
h <- (1 / nrow(DF)) + (((point - mean(DF$x))**2) / (sum((DF$x - mean(DF$x))**2)))
cat("Leverage at point 7 is", h)
install.packages("polynom")
install.packages("mpoly")
library("complexplus", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("matlib", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("polynom", lib.loc="C:/Program Files/R/R-3.5.3/library")
library("mpoly", lib.loc="C:/Program Files/R/R-3.5.3/library")
A <- matrix(c(mp(x),mp(a),mp(a),mp(a)))
View(A)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a)),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x), nrow = 4, byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a)),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x), nrow = 4, ncol = 4 byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a)),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x)), nrow = 4, ncol = 4 byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x)), nrow = 4, ncol = 4 byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x)), nrow = 4, ncol = 4 byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a)), nrow = 4, ncol = 4 byrow = TRUE)
A <- matrix(c(mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x),mp(a),mp(a),mp(a),mp(a),mp(x)), nrow = 4, ncol = 4 ,byrow = TRUE)
View(A)
det(A)
A <- matrix(c(mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x")), nrow = 4, ncol = 4 ,byrow = TRUE)
View(A)
det(A)
strings <- print(A, silent = TRUE)
A <- matrix(c(mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x"),mp("a"),mp("a"),mp("a"),mp("a"),mp("x")), nrow = 4, ncol = 4 ,byrow = TRUE)
strings <- print(A, silent = TRUE)
strings
mp(strings)
View(strings)
unclass(A)
strings
mp(strings)
is.mpolyList(A)
gradient(A)
deriv(A, 'x')
A <- matrix(c(-2,-3,-3,-1,0,-1,5,5,6), nrow=3, byrow = T)
a <- eigen(A)$values
k <- unique(a)
k
install.packages("unique")
library("dplyr", lib.loc="C:/Program Files/R/R-3.5.3/library")
k <- distinct(a)
A <- matrix(c(-2,-3,-3,-1,0,-1,5,5,6), nrow=3, byrow = T)
a <- eigen(A)$values
a
k <- distinct(a)
uk
k <- unique.array(a)
k <- unique(a)
k
k <- table(a$val)
k <- table(a)$values
k <- table(a)
k
distinct(k)
count(k)
count(distinct(a))
length(k)
B <- diag(x=1, nrow = 3 , ncol = 3)
View(B)
k[1]
k[1][1]
k[2][1]
a
a[1]
b <- eigen(A)$vector
View(b)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
b[1]
b[2]
b[3]
b <- eigen(A)$vector
b[1][]
b[2][]
b[3][]
source('~/CODE/Basics of Linear Algebra/Chapter 3/g.R', echo=TRUE)
A <- matrix(c(1,0,0,0,1,0,0,0,1), ncol = 3 , nrow = 3 , byrow = T)
B <- matrix(c(1,1,1,1,1,1,1,1,1), nrow = 3 , byrow = T )
# Given that X+A =2(X-B)
# We have X = A+2B, from the given equation , So
X<- A+2B
# Given that X+A =2(X-B)
# We have X = A+2B, from the given equation , So
X <- A + 2*B
X
source('~/.active-rstudio-document', echo=TRUE)
if(all.equal(-(A+B),(-A-B)) == TRUE){
print(" The equation is valid ")
}else{
print(" Equation is invalid")
}
source('~/.active-rstudio-document', echo=TRUE)
A <- matrix(1:9, nrow = R ,ncol = C)
R <- 3
C <- 3
A <- matrix(1:9, nrow = R ,ncol = C)
source('~/.active-rstudio-document', echo=TRUE)
View(A)
source('~/.active-rstudio-document', echo=TRUE)
View(A)
source('~/.active-rstudio-document', echo=TRUE)
View(A)
source('~/.active-rstudio-document', echo=TRUE)
X
for (i in 1:R) {
for (j in 1:C) {
X[i,j] <- i+j
}
}
X
source('~/CODE/Basics of Linear Algebra/Chapter 1/EX1_4.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
A <- matrix(c(0,1,0,1), nrow=2,ncol=2, byrow = TRUE)
B <- matrix(c(-1,-1,0,0), nrow=2,ncol=2, byrow = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(A)
View(B)
print(A*B)
View(A)
View(B)
source('~/CODE/Basics of Linear Algebra/Chapter 3/g.R', echo=TRUE)
A <- matrix(c(1,2,0,2,0,1,1,1,1,0,1,0), nrow = R,ncol = C, byrow = TRUE)
N <- echelon(A)
N
r <- rankMatrix(N)
print(r[1])
e<-eigen(A)
A <- matrix(c(1,1,2,1,0,-2,0,0,1,2,1,-2,0,3,2,1), nrow =  4, ncol =4  , byrow = TRUE)
det(A)
inv(A)
install.packages("pracma")
A <- matrix(c(1,0,2,2,1,2,0,1,-2), nrow = 3,byrow = T)
library("Matrix", lib.loc="C:/Program Files/R/R-3.5.3/library")
r <- rankMatrix(A)
r
r <- rankMatrix(A)$values
A <- matrix(c(1,0,2,2,1,2,0,1,-2), nrow = R,ncol=C,byrow = T)
# Exercise 36   Chapter:6   Page no.: 112
# Nullity and Rank
# Include "pracma" and "Matrix" library
R <- 3
C <- 3
A <- matrix(c(1,0,2,2,1,2,0,1,-2), nrow = R,ncol=C,byrow = T)
r <- rankMatrix(A)
r[1]
source('~/.active-rstudio-document', echo=TRUE)
setwd("E:/Program Files/Recycle/Aerobin data")
View(I)
View(N)
